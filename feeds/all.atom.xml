<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Vlad's blog</title><link href="https://vladcalin.github.io/" rel="alternate"></link><link href="https://vladcalin.github.io/feeds/all.atom.xml" rel="self"></link><id>https://vladcalin.github.io/</id><updated>2017-01-10T11:54:00+01:00</updated><entry><title>What every Python project should have</title><link href="https://vladcalin.github.io/what-every-python-project-should-have.html" rel="alternate"></link><published>2017-01-09T20:21:00+01:00</published><updated>2017-01-10T11:54:00+01:00</updated><author><name>Vlad Calin</name></author><id>tag:vladcalin.github.io,2017-01-09:/what-every-python-project-should-have.html</id><summary type="html">&lt;p&gt;Over the past few years, the Python programming language gained a huge popularity boost
and its community grew faster than ever. With this growth, a lot of tools appeared that
help the community keep things organized and accessible. In this article I am going
to provide a short list of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past few years, the Python programming language gained a huge popularity boost
and its community grew faster than ever. With this growth, a lot of tools appeared that
help the community keep things organized and accessible. In this article I am going
to provide a short list of items every Python project should have in order to be
accessible and maintainable.&lt;/p&gt;
&lt;h2&gt;requirements.txt&lt;/h2&gt;
&lt;p&gt;Firstly, the &lt;code&gt;requirements.txt&lt;/code&gt; file is crucial for the sanity of those who want to install your project.
It is basically a text file which contains the dependencies to be installed via &lt;code&gt;pip&lt;/code&gt;, one per line. &lt;/p&gt;
&lt;p&gt;It is that simple. And that powerful. &lt;/p&gt;
&lt;p&gt;You can also have multiple &lt;code&gt;requirements.txt&lt;/code&gt; files that serve different purposes. For example,
you can have a &lt;code&gt;requirements.txt&lt;/code&gt; that have general dependencies listed that your project need to run, a &lt;code&gt;requirements_dev.txt&lt;/code&gt; where
you have listed some dependencies that enable some debugging mechanisms and a &lt;code&gt;requirements_docs.txt&lt;/code&gt; that has listed some
requirements that are used when generating the documentation (such as &lt;code&gt;Sphinx&lt;/code&gt; and the desired &lt;code&gt;theme&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;setup.py&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;setup.py&lt;/code&gt; file is crucial for your project if you want to be installable via &lt;code&gt;pip&lt;/code&gt;. It is easy to write, very configurable and takes care of a lot of things such as importing, project metadata, updating the sources, installing the dependencies, and much more.&lt;/p&gt;
&lt;p&gt;You can check the &lt;a href="https://setuptools.readthedocs.io/en/latest/"&gt;setuptools&lt;/a&gt; documentation for more information on this. &lt;/p&gt;
&lt;h2&gt;A proper structure&lt;/h2&gt;
&lt;p&gt;The project structure is crucial. With a well organized structure, it will e easier to organize things, locate certain
source files and encourages other people to contribute.&lt;/p&gt;
&lt;p&gt;The root project directory should have a structure similar to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root/
        docs/
        tests/
        mymodule/
        scripts/
        requirements.txt
        setup.py
        README
        LICENSE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, this is not the only way to organize your project, but this certainly is the most
used template.&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Unit testing is crucial for your project. It allows you to be confident in the stability
of your code. I recommend the &lt;code&gt;unittest&lt;/code&gt; module for this job as it is built in and
is flexible enough to get the job done right. &lt;/p&gt;
&lt;p&gt;There are also other libraries that can be used for testing your project, such as
&lt;code&gt;test.py&lt;/code&gt; or &lt;code&gt;nose&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;If you develop a project, I am sure that you don't write it just for yourself. Other people
must know how to use your project properly. And even if you write the project only for yourself
(although beats the purpose of open source), after a while of not developing it and when you
come back to it, you will surely not remember anything that is going on in your code (or API).&lt;/p&gt;
&lt;p&gt;So, in order to achieve a reusable code base, you should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;design a sane API that is easy to use and remember&lt;/li&gt;
&lt;li&gt;the same sane API should be flexible enough to allow easy configurations&lt;/li&gt;
&lt;li&gt;document the most relevant use-cases&lt;/li&gt;
&lt;li&gt;don't try to fit all cases. It should fit only the most usual 80% of cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to properly document your code, you should use a tool specialized for that job, such
as &lt;code&gt;Sphinx&lt;/code&gt; or &lt;code&gt;mkdocs&lt;/code&gt;, so that you can generate nice-looking documentation with proper
reference links by writing in a popular markup language designed just for that (rst or markdown).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After you familiarize yourself with the topics described above, you will surely be able to
produce nice structured projects and libraries that comply to the community standards. And 
don't forget to ALWAYS use PEP-8!&lt;/p&gt;</content><category term="project"></category><category term="python"></category><category term="tips"></category></entry><entry><title>Finally I made myself a blog</title><link href="https://vladcalin.github.io/finally-i-made-myself-a-blog.html" rel="alternate"></link><published>2017-01-07T20:21:00+01:00</published><updated>2017-01-07T22:37:00+01:00</updated><author><name>Vlad Calin</name></author><id>tag:vladcalin.github.io,2017-01-07:/finally-i-made-myself-a-blog.html</id><summary type="html">&lt;p&gt;There is no secret that having a blog is no big deal. Nowdays, everybody can create and host
a blog with ease. So I though... why shouldn't I have a blog?&lt;/p&gt;
&lt;p&gt;I always wanted to write about different things that bug or incite me, write a couple
of words about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is no secret that having a blog is no big deal. Nowdays, everybody can create and host
a blog with ease. So I though... why shouldn't I have a blog?&lt;/p&gt;
&lt;p&gt;I always wanted to write about different things that bug or incite me, write a couple
of words about some interesting things I do or see other people do, offer some tips
about the problems that every programmer once had, etc.&lt;/p&gt;
&lt;p&gt;Over the past few days, I searched a method to create a free blog without any major
complications and drama. I researched a little and I tried some of the most popular
choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using Blogger (Google's platform for blogging)&lt;/li&gt;
&lt;li&gt;using Wordpress&lt;/li&gt;
&lt;li&gt;using Jekyll&lt;/li&gt;
&lt;li&gt;using Pelican&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these tools have their strengths and weaknesses. &lt;/p&gt;
&lt;h3&gt;Blogger&lt;/h3&gt;
&lt;p&gt;My first choice was blogger. Why? Because Google owns us, of course.&lt;/p&gt;
&lt;p&gt;Joking aside, it came very easy to start a blog using their platform, as I use Google Chrome as
my main browser and I am logged in with my GMail account. &lt;/p&gt;
&lt;p&gt;The main advantage was that it was easy to start a blog from scratch and publish the first post.
But that was not enough for me. The lack of customization for my blog made me reconsider my choice 
and look further for alternatives. More precisely, they have just a bunch of available themes
and they all look ...  let's just say, not appealing. I had to find something that could be easily 
customizable without loosing its functionality.&lt;/p&gt;
&lt;h3&gt;Wordpress&lt;/h3&gt;
&lt;p&gt;After the Blogger dissapointment, I moved on to Wordpress, the great platform for blogging.
I created an account, I created a blog, I created a new post, published it... but I knew something
was missing... It was all so complicated, everything was so customizable with so many options that 
I was losing myself in those details. &lt;/p&gt;
&lt;p&gt;The next day when I wanted to check out how everything is going, the browser started to crash when I
was accessing their site with an "Out of memory" error. That was unpleasant and frustrating as I was
unable to access the platform. I had to find something else.&lt;/p&gt;
&lt;h3&gt;Jekyll&lt;/h3&gt;
&lt;p&gt;After a while, I heard about some static site generators. I knew, in essence, what they were because I
used Sphinx to convert RST markup to Python documentation, but I never actually got in touch with 
other static site generators other than that. With one search on Google, I found this little tool
named Jekyll (an odd name, to be honest). I followed all their steps in the tutorial and I was
able to generate a mini-blog with a hello world. But I didn't like it because I had to install 
a bunch of useless packages (ruby, gem, some other packages that I had to install because
of some weird errors) just to run Jekyll and generate some HTML pages. Being a Python developer, I said
that there has to be something similar for Python.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;After searching for a few minutes, I stumbled upon &lt;strong&gt;Pelican&lt;/strong&gt; - a static site generator written in
Python. After the usual &lt;code&gt;pip install ...&lt;/code&gt; thingy, everything was ready. I followed their tutorial
and found out that everything was so easy... and free... and from the comfort of my own hardware, 
not on the platform of some corporation. It felt right, it was easy, it was fast.&lt;/p&gt;
&lt;p&gt;And now, I am using this method of writing a blog and I sincerely recommend it!&lt;/p&gt;</content><category term="blog"></category><category term="python"></category></entry></feed>